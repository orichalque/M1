import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Scanner;

import org.apache.jena.query.Dataset;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.rdf.model.InfModel;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.sparql.core.DatasetImpl;
import org.apache.jena.update.UpdateAction;
import org.apache.jena.update.UpdateExecutionFactory;
import org.apache.jena.update.UpdateFactory;
import org.apache.jena.update.UpdateProcessor;
import org.apache.jena.update.UpdateRequest;
import org.apache.jena.util.FileManager;



public class Parser {

		public Model model = ModelFactory.createDefaultModel();
		private static Scanner input;
		private Dataset data = new DatasetImpl(ModelFactory.createDefaultModel());
 
		public void exo1() {		
			doRequest("request1.rq");			 
		}
		
		public void exo2() {			
			doRequest("request2.rq"); 
		}
		
		public void exo3() {			
			doRequestUpdate("request3.rq");
		}
		
		public void exo4() {
			doRequest("request4_1.rq");
			doRequest("request4_2.rq");
		}
		
		public void exo5() {
			InfModel infModel = null;
			Dataset dataset = new DatasetImpl(model);
			
			infModel = ModelFactory.createRDFSModel(dataset.getDefaultModel());
			dataset.setDefaultModel(infModel);
			data = dataset;
			System.out.println("Passage a un model inféré");
			doRequest("request4_1.rq");
			doRequest("request4_2.rq"); 
		}
		 

		public static void readingRDF(String filename){

			// Open RDF file
			InputStream in = FileManager.get().open(filename);
			if (in == null) {
			    throw new IllegalArgumentException("File not found");
			}
			// Load file content
			model.read(in, null);

		}

		public static String readQuery(String filename){
			try {
	            File file = new File(filename);
	            FileInputStream inputStream = new FileInputStream(file);
	            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
	            StringBuilder data = new StringBuilder();
	            String line;

	            while ((line = reader.readLine()) != null) {
	                data.append(line + "\n");
	            }

	            inputStream.close();
				return data.toString();
	        }
	        catch(Exception ex){
	            return null;
	        }
		}
		
		public void doRequestOnDataSet(String filename) {
			String request = readQuery(filename);
			System.out.println("\n-> Request on file: \"" + filename + "\"");
			System.out.println(request);
			System.out.println("-> Perform request...\n");
			Query query = QueryFactory.create(request);
			QueryExecution qexec = QueryExecutionFactory.create(query, data);
			ResultSet results =  qexec.execSelect();
			// Output query results	
			ResultSetFormatter.out(System.out, results, query);
			// Important - free up resources used running the query
			qexec.close();
		}
		
		public static void doRequestUpdate(String filename) {
			String request = readQuery(filename);
			System.out.println("\n-> Request on file: \"" + filename + "\"");
			System.out.println(request);
			System.out.println("-> Perform request...\n");
			Dataset dataset = new DatasetImpl(model);
			UpdateRequest query = UpdateFactory.create(request);
			UpdateProcessor qexec = UpdateExecutionFactory.create(query, dataset);
			qexec.execute();
		}
		
		public static void doRequest(String filename) {
			String request = readQuery(filename);
			System.out.println("\n-> Request on file: \"" + filename + "\"");
			System.out.println(request);
			System.out.println("-> Perform request...\n");
			Query query = QueryFactory.create(request);
			QueryExecution qexec = QueryExecutionFactory.create(query, model);
			ResultSet results =  qexec.execSelect();
			// Output query results	
			ResultSetFormatter.out(System.out, results, query);
			// Important - free up resources used running the query
			qexec.close();
		}
		
		public static void main(String[] args) {
			Parser p = new Parser();
			readingRDF("peinture.rdfs");
			System.out.println("Question 1");
			exo1();
			System.out.println("Question 2");
			exo2();
			System.out.println("Question 3");
			exo3();
			System.out.println("Question 4");
			exo4();
			System.out.println("Question 5");
			Parser p = new Parser();
			p.exo5();
		}
}

